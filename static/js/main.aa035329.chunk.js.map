{"version":3,"sources":["Form.js","List.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","submit","className","type","value","myValue","onChange","eventHandler","List","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOptionChange","event","setState","selectedOption","target","handleCompleted","ticketId","myoptions","state","ticket","styleState","edit","isEditing","newText","editNewText","editText","changeEdit","e","ticketIdChange","name","options","textTrue","defaultValue","index","indexToChange","data-name","onClick","liRemove","remove","map","key","onMouseLeave","mouseLeave","Component","App","preventDefault","prevState","items","concat","toConsumableArray","text","display","displayNone","item","window","confirm","filter","completed","webmaster","objectSpread","isComplete","webmasters","bind","assertThisInitialized","_this2","src_Form","src_List","newEditText","class","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa035329.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form onSubmit={props.submit}>\r\n      <div className=\"input-group col-lg-6 mx-auto\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          value={props.myValue}\r\n          onChange={props.eventHandler}\r\n        />\r\n        <div className=\"input-group-append\">\r\n          <button className=\"btn btn-outline-secondary\"> Submit</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\r\n\r\nclass List extends Component {\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.state = {\r\n      selectedOption: false,\r\n      ticket: \"\",\r\n      isEditing: false,\r\n      editText: props.name,\r\n      ticketId: \"\",\r\n      styleState: false\r\n    };\r\n\r\n    //webmasters select menu\r\n\r\n    this.options = [\r\n      { name: \"Assign Webmaster\" },\r\n      { name: \"Adam Lopez\" },\r\n      { name: \"Carlos Fonseca\" },\r\n      { name: \"Dean Richards\" },\r\n      { name: \"Fran Navarro\" },\r\n      { name: \"Adam Lopez\" },\r\n      { name: \"George Barbu\" },\r\n      { name: \"Joseph Victory\" },\r\n      { name: \"Kevin A.Morillo\" },\r\n      { name: \"Lee Cockcroft\" },\r\n      { name: \"Lee Fendley\" },\r\n      { name: \"Marian Stroiu\" },\r\n      { name: \"Robin Whitting\" },\r\n      { name: \"Ross Fleming\" },\r\n      { name: \"Wojchiech Gefert\" }\r\n    ];\r\n  }\r\n\r\n  handleOptionChange = event => {\r\n    //event change\r\n    this.setState({\r\n      selectedOption: event.target.value\r\n    });\r\n  };\r\n\r\n  handleCompleted = (selectedOption, ticketId) => {\r\n    //onsubmit complete button\r\n    this.props.myoptions(this.state.selectedOption, this.state.ticket);\r\n    this.setState({\r\n      styleState: !this.state.styleState\r\n    });\r\n  };\r\n\r\n  edit = (isEditing, newText) => {\r\n    this.setState({\r\n      isEditing: !this.state.isEditing\r\n    });\r\n\r\n    this.props.editNewText(this.state.isEditing, this.state.editText);\r\n  };\r\n\r\n  changeEdit = e => {\r\n    this.setState({\r\n      editText: e.target.value\r\n    });\r\n  };\r\n\r\n  ticketIdChange = e => {\r\n    this.setState({\r\n      ticket: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    //input edit\r\n    let textTrue;\r\n\r\n    if (this.state.isEditing) {\r\n      textTrue = (\r\n        <input\r\n          type=\"text\"\r\n          defaultValue={this.props.name}\r\n          onChange={this.changeEdit}\r\n          className=\"uppercase\"\r\n        />\r\n      );\r\n    }\r\n    if (this.state.styleState) {\r\n      return <span className=\"menu navigation-menu\" />;\r\n    }\r\n\r\n    return (\r\n      <li index={this.props.indexToChange} data-name={this.props.index}>\r\n        <span className=\"li-text\">\r\n          {\" \"}\r\n          {this.props.name} {textTrue}\r\n        </span>\r\n        <div className=\"btn-group\">\r\n          <button className=\"btn-style btn btn-info\" onClick={this.edit}>\r\n            {\" \"}\r\n            {this.state.isEditing ? \"save\" : \"edit\"}{\" \"}\r\n          </button>\r\n          <button\r\n            className={this.props.liRemove ? \"btn btn-danger\" : \"test\"}\r\n            onClick={this.props.remove}\r\n          >\r\n            Remove{\" \"}\r\n          </button>\r\n        </div>\r\n\r\n        <select className=\"select\" onChange={this.handleOptionChange}>\r\n          {this.options.map((options, index) => (\r\n            <option key={index} value={options.name}>\r\n              {options.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <label> Ticket Number &nbsp; </label>\r\n\r\n        <input\r\n          type=\"text\"\r\n          defaultValue={this.state.ticketId}\r\n          onChange={this.ticketIdChange}\r\n          onMouseLeave={this.mouseLeave}\r\n        />\r\n\r\n        <button onClick={this.handleCompleted}> Task Completed </button>\r\n\r\n        <hr />\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from \"react\";\nimport Form from \"./Form\";\nimport \"./App.css\";\nimport List from \"./List\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isComplete: false,\n      isEditing: false,\n      text: \"\",\n      items: [],\n      completed: [],\n      webmasters: [],\n      newText: \"\",\n      styleState: false,\n      liRemove: false,\n      index: 0,\n      displayNone: \"block\"\n    };\n\n    this.submit = this.submit.bind(this);\n    this.eventHandler = this.eventHandler.bind(this);\n  }\n\n  //submit todo list\n  submit = e => {\n    e.preventDefault();\n    this.setState(prevState => ({\n      items: [\n        ...prevState.items,\n        {\n          name: this.state.text,\n          index: this.state.index,\n          remove: this.state.liRemove,\n          display: this.state.displayNone\n        }\n      ],\n      text: \"\"\n    }));\n  };\n\n  //remove item from the todo list\n\n  remove = (item, indexToChange) => {\n    const confirmDelete = window.confirm(\n      \"Are you sure you wish to delete this item?\"\n    );\n    if (confirmDelete) {\n      this.setState({\n        items: this.state.items.filter(name => name !== item)\n      });\n    }\n  };\n\n  //\n  eventHandler = e => {\n    this.setState({\n      text: e.target.value\n    });\n  };\n\n  // select webmaster and ticketId insert in to completed array\n  myoptions = (item, selectedOption, ticket) => {\n    this.setState({\n      completed: [\n        {\n          name: item.name,\n          webmaster: selectedOption,\n          ticketId: ticket\n        },\n        ...this.state.completed\n      ]\n    });\n  };\n\n  //edit todo item\n\n  editNewText = (indexToChange, item, isEditing, newText) => {\n    if (isEditing === true) {\n      this.setState({\n        items: this.state.items.map((item, index) => {\n          if (indexToChange === index) {\n            return {\n              ...item,\n              name: newText\n            };\n          }\n          return item;\n        })\n      });\n    }\n  };\n\n  render() {\n    if (this.state.styleState) {\n      return <span className=\"menu navigation-menu\" />;\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Form\n            submit={this.submit}\n            myValue={this.state.text}\n            eventHandler={this.eventHandler}\n          />\n          <h4 className=\"incompleted-title\"> Incompleted Tasks </h4>\n          <ul>\n            {this.state.items.map &&\n              this.state.items.map((item, index) => (\n                <List\n                  key={index}\n                  name={item.name}\n                  remove={() => this.remove(item, index)}\n                  myoptions={(selectedOption, ticket, newEditText) =>\n                    this.myoptions(item, selectedOption, ticket, newEditText)\n                  }\n                  indexToChange={item.index}\n                  liRemove={this.state.liRemove}\n                  isEditing={this.isEditing}\n                  editNewText={(isEditing, newText) =>\n                    this.editNewText(index, item, isEditing, newText)\n                  }\n                  displayNone={this.state.displayNone}\n                />\n              ))}\n          </ul>\n        </header>\n\n        <div className=\"completed\">\n          <h2>completed</h2>\n          <ul>\n            {this.state.completed.map((completed, index) => (\n              <li class=\"completedList\">\n                {\" \"}\n                Task: <strong>{completed.name} </strong> was completed by\n                <strong> {completed.webmaster} </strong>by ticket\n                <strong> {completed.ticketId}</strong>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}